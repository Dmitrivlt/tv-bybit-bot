import os
import logging
from fastapi import FastAPI, Request
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()

API_KEY = os.getenv("BYBIT_API_KEY")
API_SECRET = os.getenv("BYBIT_API_SECRET")
SYMBOL = os.getenv("SYMBOL", "SOLUSDT")
CATEGORY = "linear"
TIMEFRAME = os.getenv("TIMEFRAME", "5m")  # —Ç–∞–π–º—Ñ—Ä–µ–π–º —á–µ—Ä–µ–∑ .env

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ===
app = FastAPI()

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit ===
session = HTTP(
    testnet=True,
    api_key=API_KEY,
    api_secret=API_SECRET
)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –ø–ª–µ—á–∞ ===
try:
    instruments = session.get_instruments_info(category=CATEGORY, symbol=SYMBOL)
    logger.info(f"‚ÑπÔ∏è Instruments info: {instruments}")

    leverage = 1
    response = session.set_leverage(
        category=CATEGORY,
        symbol=SYMBOL,
        buyLeverage=str(leverage),
        sellLeverage=str(leverage)
    )
    if response.get("retCode") == 0:
        logger.info(f"‚úÖ Leverage set to {leverage}x for {SYMBOL}")
    elif response.get("retCode") == 110043:
        logger.warning(f"‚ö†Ô∏è Leverage already set to {leverage}x, skipping update.")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {response}")
except Exception as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit: {e}")

# === Webhook ===
@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    side = data.get("side")

    if side not in ["Buy", "Sell"]:
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {data}")
        return {"status": "error", "message": "Invalid signal"}

    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {side} | –¢–∞–π–º—Ñ—Ä–µ–π–º: {TIMEFRAME}")

    # === –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–æ) ===
    try:
        order = session.place_order(
            category=CATEGORY,
            symbol=SYMBOL,
            side=side,
            orderType="Market",
            qty=1,  # —Ç–µ—Å—Ç–æ–≤–æ–µ –∫–æ–ª-–≤–æ
            timeInForce="GTC"
        )
        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {order}")
        return {"status": "ok", "side": side, "timeframe": TIMEFRAME}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return {"status": "error", "message": str(e)}
