import logging
from fastapi import FastAPI, Request, Query
from fastapi.responses import JSONResponse
from pybit.unified_trading import HTTP

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI ===
app = FastAPI()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger("tradingview_bot")

# === –°–µ–∫—Ä–µ—Ç –¥–ª—è TradingView ===
SECRET_TOKEN = "mysecret123"

# === API –∫–ª—é—á–∏ Bybit (‚ö†Ô∏è –¢–£–¢ –í–ü–ò–®–ò –°–í–û–ò) ===
API_KEY = "CN4jydkkSArRVvzgTD"
API_SECRET = "JdXh8mh0cBq68ZvvjjEwCTgVBhY7EPbX2kTu"

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit ===
session = HTTP(
    testnet=True,   # ‚ö†Ô∏è True = —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞, False = —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    api_key=API_KEY,
    api_secret=API_SECRET
)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞: –º—ã —Ç–æ—Ä–≥—É–µ–º —Ç–æ–ª—å–∫–æ CYBERUSDT ===
SYMBOL = "CYBERUSDT"


@app.get("/")
async def root():
    return {"msg": "Server alive"}


@app.get("/info")
async def info():
    return {
        "ok": True,
        "endpoints": {
            "home": "/",
            "info": "/info",
            "swagger": "/docs",
            "webhook": "/tv_webhook?token=<YOUR_TOKEN>"
        },
        "your_token": SECRET_TOKEN,
        "trading_symbol": SYMBOL
    }


@app.post("/tv_webhook")
async def tv_webhook(request: Request, token: str = Query(...)):
    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
    if token != SECRET_TOKEN:
        logger.warning("‚ùå Invalid token in request")
        return JSONResponse(status_code=403, content={"error": "Invalid token"})

    # === –ü–∞—Ä—Å–∏–º payload ===
    try:
        payload = await request.json()
        logger.info(f"üì© New alert received: {payload}")
    except Exception:
        logger.error("‚ö†Ô∏è Failed to parse JSON payload")
        return JSONResponse(status_code=400, content={"error": "Invalid JSON"})

    # === –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===
    action = str(payload.get("action", "")).upper()   # BUY / SELL / CLOSE
    qty = float(payload.get("qty", 1))               # —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏

    try:
        if action == "BUY":
            session.place_order(
                category="linear",
                symbol=SYMBOL,
                side="Buy",
                order_type="Market",
                qty=qty
            )
            logger.info(f"‚úÖ –û—Ç–∫—Ä—ã–ª LONG {SYMBOL} qty={qty}")

        elif action == "SELL":
            session.place_order(
                category="linear",
                symbol=SYMBOL,
                side="Sell",
                order_type="Market",
                qty=qty
            )
            logger.info(f"‚úÖ –û—Ç–∫—Ä—ã–ª SHORT {SYMBOL} qty={qty}")

        elif action == "CLOSE":
            session.cancel_all_orders(category="linear", symbol=SYMBOL)
            logger.info(f"üî¥ –ó–∞–∫—Ä—ã–ª –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ {SYMBOL}")

        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

    return {"status": "ok", "received": payload}
