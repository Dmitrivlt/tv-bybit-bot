# bot.py
import os
import math
import logging
from functools import lru_cache
from typing import Optional, Tuple

from fastapi import FastAPI, Request, Query
from fastapi.responses import JSONResponse
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()

# ---- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / ENV ----
WEBHOOK_TOKEN   = os.getenv("WEBHOOK_TOKEN", "mysecret123")
API_KEY         = os.getenv("BYBIT_API_KEY", "")
API_SECRET      = os.getenv("BYBIT_API_SECRET", "")
TESTNET         = os.getenv("BYBIT_TESTNET", "true").lower() == "true"
ENABLE_TRADING  = os.getenv("ENABLE_TRADING", "false").lower() == "true"

# —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∞–ª–µ—Ä—Ç–æ–º)
DEFAULT_LEVERAGE = int(os.getenv("DEFAULT_LEVERAGE", "1"))
DEFAULT_SL_PCT   = float(os.getenv("DEFAULT_SL_PCT", "20"))
SYMBOL           = os.getenv("SYMBOL", "CYBERUSDT")  # —Ç–æ—Ä–≥—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger("tradingview_bot")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ===
app = FastAPI(title="TV ‚Üí Bybit bot", version="1.0.0")

# === PyBit (Bybit Unified) ===
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–∞–∫–µ—Ç–æ–º: pybit==5.8.0
try:
    from pybit.unified_trading import HTTP
except Exception as e:
    logger.error("PyBit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤—å 'pybit==5.8.0' –≤ requirements.txt")
    raise

session = HTTP(
    testnet=TESTNET,
    api_key=API_KEY,
    api_secret=API_SECRET,
)


# ---------- –£—Ç–∏–ª–∏—Ç—ã —Ç–æ—á–Ω–æ—Å—Ç–∏/—à–∞–≥–æ–≤ ----------
def _round_to_step(x: float, step: float) -> float:
    if step <= 0:
        return x
    return math.floor(x / step) * step


def _round_qty(qty: float, lot_step: float, min_qty: float) -> float:
    q = _round_to_step(qty, lot_step)
    if q < min_qty:
        q = 0.0
    # –£–±–∏—Ä–∞–µ–º —Å–≤–µ—Ä—Ö—Ç–æ—á–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã
    return float(f"{q:.10f}")


@lru_cache(maxsize=1)
def get_symbol_filters() -> Tuple[float, float, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (lot_step, min_qty, price_tick) –¥–ª—è SYMBOL –∏–∑ Bybit Instruments Info.
    –ö—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å.
    """
    r = session.get_instruments_info(category="linear", symbol=SYMBOL)
    lst = (r or {}).get("result", {}).get("list", [])
    if not lst:
        # –¥–µ—Ñ–æ–ª—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ—è –∑–∞–ø—Ä–æ—Å–∞
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å filters –¥–ª—è %s, –∏—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç—ã", SYMBOL)
        return (0.001, 0.001, 0.0001)

    item = lst[0]
    lot_step = float(item.get("lotSizeFilter", {}).get("qtyStep", 0.001))
    min_qty  = float(item.get("lotSizeFilter", {}).get("minOrderQty", 0.001))
    price_tick = float(item.get("priceFilter", {}).get("tickSize", 0.0001))
    return (lot_step, min_qty, price_tick)


def get_last_price() -> float:
    r = session.get_tickers(category="linear", symbol=SYMBOL)
    lst = (r or {}).get("result", {}).get("list", [])
    if not lst:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∞–π—Å")
    return float(lst[0]["lastPrice"])


def get_balance_usdt() -> float:
    r = session.get_wallet_balance(accountType="UNIFIED")  # Unified account
    balances = (r or {}).get("result", {}).get("list", [])
    if not balances:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞")
    # –∏—â–µ–º USDT
    for acc in balances:
        for c in acc.get("coin", []):
            if c.get("coin") == "USDT":
                # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—ç—à: equity –∏–ª–∏ availableToWithdraw
                # –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ª—É—á—à–µ –±—Ä–∞—Ç—å equity (–≤ —Ç.—á. –Ω–µ—Ä–µ–∞–ª–∏–∑. PnL)
                equity = float(c.get("equity", 0.0))
                avail  = float(c.get("availableToWithdraw", 0.0))
                return equity if equity > 0 else avail
    return 0.0


def ensure_leverage(leverage: int):
    """–í—ã—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–µ—á–æ (buy/sell –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ)"""
    leverage = max(1, min(int(leverage), 100))
    try:
        session.set_leverage(
            category="linear",
            symbol=SYMBOL,
            buyLeverage=str(leverage),
            sellLeverage=str(leverage),
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ {leverage}x: {e}")


def get_open_position() -> Tuple[str, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (side, size), –≥–¥–µ side in {"Long","Short","None"}, size ‚Äî –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.
    """
    r = session.get_positions(category="linear", symbol=SYMBOL)
    lst = (r or {}).get("result", {}).get("list", [])
    if not lst:
        return ("None", 0.0)
    p = lst[0]
    size = float(p.get("size", 0.0) or 0.0)
    side = p.get("side") or "None"
    if size <= 0.0:
        return ("None", 0.0)
    return (side, size)


def close_position_if_needed(side_to_open: str):
    """
    –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –∏ –æ–Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–µ reduceOnly –º–∞—Ä–∫–µ—Ç–æ–º.
    side_to_open: "Buy" –∏–ª–∏ "Sell"
    """
    cur_side, cur_size = get_open_position()
    if cur_side == "None" or cur_size <= 0:
        return

    # –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º Buy, –∞ —Å–µ–π—á–∞—Å Short ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ–º
    if side_to_open == "Buy" and cur_side == "Short":
        try:
            session.place_order(
                category="linear",
                symbol=SYMBOL,
                side="Buy",
                order_type="Market",
                qty=cur_size,
                reduceOnly=True
            )
            logger.info(f"‚ÜîÔ∏è –ó–∞–∫—Ä—ã–ª SHORT {cur_size} {SYMBOL}")
        except Exception as e:
            logger.error(f"–ù–µ —Å–º–æ–≥ –∑–∞–∫—Ä—ã—Ç—å SHORT: {e}")
            raise

    # –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º Sell, –∞ —Å–µ–π—á–∞—Å Long ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ–º
    if side_to_open == "Sell" and cur_side == "Long":
        try:
            session.place_order(
                category="linear",
                symbol=SYMBOL,
                side="Sell",
                order_type="Market",
                qty=cur_size,
                reduceOnly=True
            )
            logger.info(f"‚ÜîÔ∏è –ó–∞–∫—Ä—ã–ª LONG {cur_size} {SYMBOL}")
        except Exception as e:
            logger.error(f"–ù–µ —Å–º–æ–≥ –∑–∞–∫—Ä—ã—Ç—å LONG: {e}")
            raise


def place_stop_loss(side: str, sl_pct: float, entry_price_hint: float, price_tick: float):
    """
    –°—Ç–∞–≤–∏—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é (—á–µ—Ä–µ–∑ set_trading_stop).
    side: "Buy"|"Sell" ‚Äî —Å—Ç–æ—Ä–æ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ (–¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è SL).
    sl_pct: % –æ—Ç —Ü–µ–Ω—ã (10 => 10%)
    entry_price_hint: –∏—Å–ø–æ–ª—å–∑—É–µ–º lastPrice –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä.
    """
    sl_pct = max(0.1, float(sl_pct))
    if side == "Buy":
        sl_price = entry_price_hint * (1.0 - sl_pct / 100.0)
    else:
        sl_price = entry_price_hint * (1.0 + sl_pct / 100.0)

    # –æ–∫—Ä—É–≥–ª–∏–º –ø–æ —à–∞–≥—É —Ü–µ–Ω—ã
    sl_price = math.floor(sl_price / price_tick) * price_tick
    sl_price = float(f"{sl_price:.10f}")

    try:
        session.set_trading_stop(
            category="linear",
            symbol=SYMBOL,
            stopLoss=str(sl_price)  # —Å—Ç—Ä–æ–∫–æ–π, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç API
        )
        logger.info(f"üõ° SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @ {sl_price}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL: {e}")


def compute_order_qty(percent: float, leverage: int, last_price: float,
                      lot_step: float, min_qty: float) -> float:
    """
    –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏:
    qty = (balance_usdt * (percent/100) * leverage) / last_price
    —Å —É—á–µ—Ç–æ–º —à–∞–≥–∞ –∏ –º–∏–Ω–∏–º—É–º–∞.
    """
    percent = max(1.0, min(float(percent), 100.0))
    leverage = max(1, min(int(leverage), 100))

    balance = get_balance_usdt()
    notional = balance * (percent / 100.0) * leverage
    raw_qty = notional / last_price
    qty = _round_qty(raw_qty, lot_step, min_qty)
    return qty


# ---------- FastAPI endpoints ----------
@app.get("/")
async def home():
    return {"msg": "Server alive"}

@app.get("/info")
async def info():
    lot_step, min_qty, price_tick = get_symbol_filters()
    health = {
        "ok": True,
        "symbol": SYMBOL,
        "testnet": TESTNET,
        "trading_enabled": ENABLE_TRADING,
        "default_leverage": DEFAULT_LEVERAGE,
        "default_sl_pct": DEFAULT_SL_PCT,
        "filters": {
            "lot_step": lot_step,
            "min_qty": min_qty,
            "price_tick": price_tick
        }
    }
    # –±–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å —Å –æ—à–∏–±–∫–æ–π –µ—Å–ª–∏ –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
    try:
        health["balance_usdt"] = get_balance_usdt()
    except Exception as e:
        health["balance_usdt_err"] = str(e)
    return health


@app.post("/tv_webhook")
async def tv_webhook(request: Request, token: str = Query(...)):
    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if token != WEBHOOK_TOKEN:
        logger.warning("‚ùå Invalid token in request")
        return JSONResponse(status_code=403, content={"error": "Invalid token"})

    # 2) –ü–∞—Ä—Å–∏–º payload
    try:
        payload = await request.json()
    except Exception:
        logger.error("‚ö†Ô∏è Invalid JSON")
        return JSONResponse(status_code=400, content={"error": "Invalid JSON"})

    logger.info(f"üì© Alert: {payload}")

    # 3) –†–∞–∑–±–∏—Ä–∞–µ–º –ø–æ–ª—è
    action   = str(payload.get("action", "")).upper()   # BUY / SELL / CLOSE
    percent  = float(payload.get("percent", 50))        # % –æ—Ç –±–∞–ª–∞–Ω—Å–∞
    leverage = int(payload.get("leverage", DEFAULT_LEVERAGE))
    sl_pct   = float(payload.get("sl_pct", DEFAULT_SL_PCT))

    lot_step, min_qty, price_tick = get_symbol_filters()

    # 4) Dry-run?
    if not ENABLE_TRADING:
        # –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å—á—ë—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        last = 0.0
        try:
            last = get_last_price()
        except Exception as e:
            logger.warning(f"–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å lastPrice: {e}")
        try:
            qty_preview = compute_order_qty(percent, leverage, last or 1.0, lot_step, min_qty) if last > 0 else 0
        except Exception as e:
            qty_preview = 0
            logger.warning(f"–ù–µ —Å–º–æ–≥ –ø–æ—Å—á–∏—Ç–∞—Ç—å qty: {e}")

        logger.info(f"üß™ DRY-RUN | action={action} %={percent} lev={leverage} sl%={sl_pct} "
                    f"last={last} qty‚âà{qty_preview}")
        return {"status": "dry-run", "received": payload, "qty_preview": qty_preview, "last": last}

    # 5) –ë–æ–µ–≤–∞—è –ª–æ–≥–∏–∫–∞
    try:
        if action in ("BUY", "SELL"):
            # –ø–ª–µ—á–æ
            ensure_leverage(leverage)

            # –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (–∞–≤—Ç–æ—Ä–µ–≤–µ—Ä—Å)
            side_to_open = "Buy" if action == "BUY" else "Sell"
            close_position_if_needed(side_to_open)

            # —Ä–∞—Å—á—ë—Ç qty
            last = get_last_price()
            qty  = compute_order_qty(percent, leverage, last, lot_step, min_qty)
            if qty <= 0:
                raise RuntimeError("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π qty <= 0 (–≤–æ–∑–º–æ–∂–Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞–ª–∞–Ω—Å/%/—à–∞–≥ –ª–æ—Ç–∞)")

            # –≤—Ö–æ–¥
            resp = session.place_order(
                category="linear",
                symbol=SYMBOL,
                side=side_to_open,
                order_type="Market",
                qty=qty
            )
            logger.info(f"‚úÖ –û—Ç–∫—Ä—ã–ª {action} {SYMBOL} qty={qty}")

            # —Å—Ç–æ–ø-–ª–æ—Å—Å (—Ç–æ–ª—å–∫–æ SL)
            place_stop_loss(side_to_open, sl_pct, last, price_tick)

            return {"status": "ok", "opened": {"side": side_to_open, "qty": qty}, "resp": resp}

        elif action == "CLOSE":
            # –∑–∞–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
            cur_side, cur_size = get_open_position()
            if cur_side == "None" or cur_size <= 0:
                logger.info("–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç ‚Äî –Ω–µ—á–µ–≥–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å")
                return {"status": "ok", "closed": "flat"}

            close_side = "Sell" if cur_side == "Long" else "Buy"
            resp = session.place_order(
                category="linear",
                symbol=SYMBOL,
                side=close_side,
                order_type="Market",
                qty=cur_size,
                reduceOnly=True
            )
            logger.info(f"üî¥ –ó–∞–∫—Ä—ã–ª –ø–æ–∑–∏—Ü–∏—é: {cur_side} {cur_size}")
            return {"status": "ok", "closed": {"was": cur_side, "qty": cur_size}, "resp": resp}

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            return JSONResponse(status_code=400, content={"error": f"Unknown action: {action}"})

    except Exception as e:
        logger.error(f"‚ùå Trade error: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})
