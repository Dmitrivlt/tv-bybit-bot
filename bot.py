# bot.py
import os
import json
from typing import Optional

from fastapi import FastAPI, Request, Header, Query, HTTPException
from fastapi.responses import JSONResponse
from dotenv import load_dotenv

# =========================
#   ENV / CONFIG
# =========================
load_dotenv()

WEBHOOK_TOKEN   = os.getenv("WEBHOOK_TOKEN", "mysecret123")

# –¢–æ—Ä–≥–æ–≤–ª—é –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ env:
# ENABLE_TRADING=true
ENABLE_TRADING  = os.getenv("ENABLE_TRADING", "false").lower() == "true"

BYBIT_API_KEY   = os.getenv("BYBIT_API_KEY", "")
BYBIT_API_SECRET= os.getenv("BYBIT_API_SECRET", "")
BYBIT_TESTNET   = os.getenv("BYBIT_TESTNET", "true").lower() == "true"  # testnet –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

exchange = None
if ENABLE_TRADING:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ccxt —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—Ä–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã
    try:
        import ccxt  # –∏–º–ø–æ—Ä—Ç–∏–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±–µ–∑ ccxt —Ç–æ–∂–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
        exchange = ccxt.bybit({
            "apiKey": BYBIT_API_KEY,
            "secret": BYBIT_API_SECRET,
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap",  # –ª–∏–Ω–µ–π–Ω—ã–µ USDT-–¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã
            },
        })
        # Testnet
        exchange.set_sandbox_mode(BYBIT_TESTNET)
        print(f"üöÄ Trading enabled | Bybit sandbox={BYBIT_TESTNET}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ä–∂—É: {e}")
        exchange = None
        ENABLE_TRADING = False

app = FastAPI(title="TV ‚Üí Bybit Webhook Bot", version="1.0.0")


# =========================
#   UTILS
# =========================
def mask_token(tok: str) -> str:
    if not tok:
        return ""
    if len(tok) <= 6:
        return "***"
    return tok[:3] + "..." + tok[-3:]


async def read_json_body(request: Request) -> dict:
    raw = await request.body()
    if not raw:
        return {}
    try:
        return json.loads(raw.decode("utf-8"))
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON body")


def ensure_token(passed: Optional[str]) -> None:
    if not passed or passed != WEBHOOK_TOKEN:
        raise HTTPException(status_code=403, detail="Invalid webhook token")


# =========================
#   HEALTH / INFO
# =========================
@app.get("/")
def root():
    return {
        "ok": True,
        "service": "tv-bybit-bot",
        "trading_enabled": ENABLE_TRADING,
        "exchange": "bybit" if ENABLE_TRADING else None,
        "testnet": BYBIT_TESTNET if ENABLE_TRADING else None,
    }


@app.get("/ping")
def ping():
    return {"pong": True}


@app.get("/info")
def info():
    return {
        "ok": True,
        "how_to_use": {
            "option_1": "POST /webhook/{token}",
            "option_2": "POST /tv_webhook?token=...  OR  header X-Webhook-Token: ...",
            "expected_json": {
                "symbol": "CYBERUSDT",
                "side": "buy | sell | close",
                "qty": 1,
                "reason": "text"
            },
        },
        "token_env": "WEBHOOK_TOKEN",
        "current_token_masked": mask_token(WEBHOOK_TOKEN),
        "trading_enabled": ENABLE_TRADING,
        "bybit": {
            "testnet": BYBIT_TESTNET,
            "needs_keys": ENABLE_TRADING
        }
    }


# =========================
#   CORE WEBHOOKS
# =========================
@app.post("/webhook/{token}")
async def webhook(token: str, request: Request):
    # —Ç–æ–∫–µ–Ω –≤ –ø—É—Ç–∏
    ensure_token(token)

    data = await read_json_body(request)
    return await _handle_signal(data)


@app.post("/tv_webhook")
async def tv_webhook(
    request: Request,
    token_q: Optional[str] = Query(default=None, alias="token"),
    token_h: Optional[str] = Header(default=None, alias="X-Webhook-Token"),
):
    # —Ç–æ–∫–µ–Ω –≤ query –∏–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    token = token_q or token_h
    ensure_token(token)

    data = await read_json_body(request)
    return await _handle_signal(data)


# =========================
#   SIGNAL HANDLER
# =========================
async def _handle_signal(data: dict) -> JSONResponse:
    """
    –ï–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç TradingView.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–ª—è:
      symbol (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), side (buy|sell|close), qty (—á–∏—Å–ª–æ), reason (—Å—Ç—Ä–æ–∫–∞)
    """
    # –õ–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üì© –ü—Ä–∏—à–µ–ª —Å–∏–≥–Ω–∞–ª:", data)

    symbol = str(data.get("symbol", "CYBERUSDT")).strip().upper()
    side   = (data.get("side") or "").strip().lower()
    qty    = data.get("qty", 0.01)
    reason = str(data.get("reason", "")).strip() or "signal"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if side not in ("buy", "sell", "close"):
        raise HTTPException(status_code=400, detail="side must be buy|sell|close")
    try:
        qty = float(qty)
        if qty <= 0:
            raise ValueError()
    except Exception:
        raise HTTPException(status_code=400, detail="qty must be positive number")

    # –ü–µ—á–∞—Ç—å –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞)
    print(f"‚úÖ SIGNAL: side={side} qty={qty} symbol={symbol} reason={reason}")

    # –ï—Å–ª–∏ —Ç–æ—Ä–≥–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏–µ–º
    if not ENABLE_TRADING or exchange is None:
        return JSONResponse({
            "status": "received",
            "trading_enabled": False,
            "echo": {
                "symbol": symbol, "side": side, "qty": qty, "reason": reason
            }
        })

    # ====== –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ======
    try:
        # –í–Ω–∏–º–∞–Ω–∏–µ –∫ —Å–∏–º–≤–æ–ª–∞–º Bybit/ccxt:
        # –î–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö USDT-—Å–≤–æ–ø–æ–≤ —á–∞—â–µ –≤—Å–µ–≥–æ ccxt –ø—Ä–∏–Ω–∏–º–∞–µ—Ç "CYBERUSDT".
        # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ "symbol not found", –ø–æ–ø—Ä–æ–±—É–π —Ñ–æ—Ä–º–∞—Ç "CYBER/USDT:USDT".
        place_symbol = symbol

        order = None
        if side == "buy":
            order = exchange.create_market_buy_order(place_symbol, qty)
        elif side == "sell":
            order = exchange.create_market_sell_order(place_symbol, qty)
        elif side == "close":
            # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–µ—á–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π qty
            # (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ: –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –≤–µ—Å—å —Ä–∞–∑–º–µ—Ä)
            # –î–ª—è —Ç–µ—Å—Ç–Ω–µ—Ç–∞ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—É—Ä–∞.
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ –º–∏–Ω–∏–º—É–º—É: —Å–Ω–∞—á–∞–ª–∞ sell, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî buy.
            try:
                order = exchange.create_market_sell_order(place_symbol, qty)
            except Exception:
                order = exchange.create_market_buy_order(place_symbol, qty)

        print("üßæ Bybit order response:", order)
        return JSONResponse({"status": "ok", "order": order})

    except Exception as e:
        print("‚ùå Trade error:", e)
        raise HTTPException(status_code=500, detail=f"trade error: {e}")
