import os
import logging
from fastapi import FastAPI, Request, HTTPException
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
# =========================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

# =========================
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
# =========================
load_dotenv()

WEBHOOK_TOKEN   = os.getenv("WEBHOOK_TOKEN")
BYBIT_API_KEY   = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET= os.getenv("BYBIT_API_SECRET")
BYBIT_TESTNET   = os.getenv("BYBIT_TESTNET", "true").lower() == "true"
ENABLE_TRADING  = os.getenv("ENABLE_TRADING", "true").lower() == "true"

DEFAULT_LEVERAGE= int(os.getenv("DEFAULT_LEVERAGE", 1))
DEFAULT_SL_PCT  = float(os.getenv("DEFAULT_SL_PCT", 20))
SYMBOL          = os.getenv("SYMBOL", "SOLUSDT")

# =========================
# Bybit client
# =========================
base_url = "https://api-testnet.bybit.com" if BYBIT_TESTNET else "https://api.bybit.com"

session = HTTP(
    testnet=BYBIT_TESTNET,
    api_key=BYBIT_API_KEY,
    api_secret=BYBIT_API_SECRET
)

# =========================
# FastAPI
# =========================
app = FastAPI()

# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
# =========================
def ensure_leverage(symbol: str, leverage: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        info = session.get_instruments_info(category="linear", symbol=symbol)
        logging.info(f"‚ÑπÔ∏è Instruments info: {info}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–ª–µ—á–æ
        pos = session.get_positions(category="linear", symbol=symbol)
        if pos["retCode"] == 0 and pos["result"]["list"]:
            current_lev = int(float(pos["result"]["list"][0]["leverage"]))
            if current_lev == leverage:
                logging.warning(f"‚ö†Ô∏è Leverage already set to {leverage}x, skipping update.")
                return
        # –ï—Å–ª–∏ –¥—Ä—É–≥–æ–µ ‚Äî –º–µ–Ω—è–µ–º
        res = session.set_leverage(
            category="linear",
            symbol=symbol,
            buyLeverage=str(leverage),
            sellLeverage=str(leverage)
        )
        if res["retCode"] == 0:
            logging.info(f"‚úÖ Leverage set to {leverage}x for {symbol}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {res}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: {e}")

# =========================
# –ú–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä
# =========================
def place_market_order(symbol: str, side: str, sl_pct: float):
    try:
        balance = session.get_wallet_balance(accountType="UNIFIED")
        usdt_balance = float(balance["result"]["list"][0]["coin"][0]["walletBalance"])
        logging.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance}")

        # –¶–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        ticker = session.get_ticker(category="linear", symbol=symbol)
        last_price = float(ticker["result"]["list"][0]["lastPrice"])

        qty = round(usdt_balance / last_price, 2)
        logging.info(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {qty} {symbol.split('USDT')[0]}")

        # –û—Ä–¥–µ—Ä–∞
        order = session.place_order(
            category="linear",
            symbol=symbol,
            side=side,
            orderType="Market",
            qty=str(qty),
            timeInForce="GoodTillCancel",
            reduceOnly=False,
            closeOnTrigger=False
        )
        logging.info(f"‚úÖ Market {side} –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {order}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        if sl_pct > 0:
            sl_price = last_price * (1 - sl_pct / 100) if side == "Buy" else last_price * (1 + sl_pct / 100)
            sl_order = session.set_trading_stop(
                category="linear",
                symbol=symbol,
                stopLoss=str(round(sl_price, 2))
            )
            logging.info(f"üõë Stop Loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {sl_order}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")

# =========================
# Webhook
# =========================
@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    token = request.headers.get("Authorization")

    if token != WEBHOOK_TOKEN:
        raise HTTPException(status_code=401, detail="Unauthorized")

    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {data}")

    if ENABLE_TRADING:
        side = data.get("side")  # "Buy" –∏–ª–∏ "Sell"
        if side in ["Buy", "Sell"]:
            place_market_order(SYMBOL, side, DEFAULT_SL_PCT)
        else:
            logging.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–Ω–µ—Ç side).")
    else:
        logging.info("üö´ –¢–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞ (ENABLE_TRADING=false).")

    return {"status": "ok"}

# =========================
# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ—á–∞
# =========================
@app.on_event("startup")
async def startup_event():
    ensure_leverage(SYMBOL, DEFAULT_LEVERAGE)
