import os
import logging
from typing import Any, Dict, Optional

from fastapi import FastAPI, Request, Query
from fastapi.responses import JSONResponse
from dotenv import load_dotenv
from pybit.unified_trading import HTTP

# ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ .env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

WEBHOOK_TOKEN      = os.getenv("WEBHOOK_TOKEN", "mysecret123")
BYBIT_API_KEY      = os.getenv("BYBIT_API_KEY", "")
BYBIT_API_SECRET   = os.getenv("BYBIT_API_SECRET", "")
BYBIT_TESTNET      = os.getenv("BYBIT_TESTNET", "true").lower() in ("1", "true", "yes")
ENABLE_TRADING     = os.getenv("ENABLE_TRADING", "false").lower() in ("1", "true", "yes")
DEFAULT_LEVERAGE   = int(os.getenv("DEFAULT_LEVERAGE", "1"))
DEFAULT_SL_PCT     = float(os.getenv("DEFAULT_SL_PCT", "20"))  # 20% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
SYMBOL             = os.getenv("SYMBOL", "CYBERUSDT")

# ‚îÄ‚îÄ –õ–æ–≥–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("tv-bybit-bot")

# ‚îÄ‚îÄ FastAPI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = FastAPI(title="TV‚ÜíBybit Bot", version="1.0")

# ‚îÄ‚îÄ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Bybit (testnet/real) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
session: Optional[HTTP] = None
if ENABLE_TRADING:
    if not BYBIT_API_KEY or not BYBIT_API_SECRET:
        logger.warning("ENABLE_TRADING=true, –Ω–æ API –∫–ª—é—á–∏ –ø—É—Å—Ç—ã–µ ‚Äî —Ç–æ—Ä–≥–æ–≤–ª—è –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        ENABLE_TRADING = False
    else:
        try:
            session = HTTP(
                testnet=BYBIT_TESTNET,
                api_key=BYBIT_API_KEY,
                api_secret=BYBIT_API_SECRET,
            )
            # –í—ã—Å—Ç–∞–≤–∏–º –ø–ª–µ—á–æ –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
            session.set_leverage(
                category="linear",
                symbol=SYMBOL,
                buyLeverage=DEFAULT_LEVERAGE,
                sellLeverage=DEFAULT_LEVERAGE,
            )
            logger.info(f"‚úÖ Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω (testnet={BYBIT_TESTNET}), –ø–ª–µ—á–æ={DEFAULT_LEVERAGE}x, —Å–∏–º–≤–æ–ª={SYMBOL}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit: {e}")
            session = None
            ENABLE_TRADING = False

# ‚îÄ‚îÄ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _get_last_price(symbol: str) -> Optional[float]:
    """–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (last/mark) –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ SL."""
    if not session:
        return None
    try:
        tick = session.get_tickers(category="linear", symbol=SYMBOL)
        # –û—Ç–≤–µ—Ç Bybit: {'result': {'list': [{'lastPrice': '1.2345', ...}]}, ...}
        lst = tick.get("result", {}).get("list", [])
        if not lst:
            return None
        price_str = lst[0].get("lastPrice") or lst[0].get("markPrice")
        return float(price_str) if price_str else None
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}: {e}")
        return None

def _place_market_with_sl(side: str, qty: float, sl_pct: float) -> Dict[str, Any]:
    """
    –ú–∞—Ä–∫–µ—Ç-–≤—Ö–æ–¥ + —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã.
    side: 'Buy' | 'Sell'
    qty: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö/–∫–æ–∏–Ω-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ Bybit (–¥–ª—è USDT-–ø–µ—Ä–ø ‚Äî –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–æ–Ω–µ—Ç—ã)
    """
    assert side in ("Buy", "Sell")

    if not session:
        return {"error": "session is None"}

    # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ SL
    last_price = _get_last_price(SYMBOL)
    if last_price is None:
        # fallback: –±–µ–∑ SL
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –±–µ–∑ SL.")
        return session.place_order(
            category="linear",
            symbol=SYMBOL,
            side=side,
            order_type="Market",
            qty=qty,
        )

    if side == "Buy":
        sl_price = last_price * (1 - sl_pct / 100.0)
    else:  # Sell
        sl_price = last_price * (1 + sl_pct / 100.0)

    # –í unified trading –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å stopLoss –≤ —Ü–µ–Ω–µ:
    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Bybit: –¥–ª—è linear –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä stopLoss
    return session.place_order(
        category="linear",
        symbol=SYMBOL,
        side=side,
        order_type="Market",
        qty=qty,
        stopLoss=f"{sl_price:.6f}",
        # reduceOnly=False ‚Äî —ç—Ç–æ –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é
    )

def _close_all_positions(symbol: str) -> None:
    """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º."""
    if not session:
        return
    try:
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        session.cancel_all_orders(category="linear", symbol=symbol)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞: {e}")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
        pos = session.get_positions(category="linear", symbol=symbol)
        items = pos.get("result", {}).get("list", []) if pos else []
        if not items:
            return
        size = float(items[0].get("size", 0) or 0)
        side = items[0].get("side", "").lower()  # 'Buy'/'Sell' –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö
        if size == 0:
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –Ω–∞ —Ç–æ—Ç –∂–µ qty
        if side == "buy":
            session.place_order(
                category="linear",
                symbol=symbol,
                side="Sell",
                order_type="Market",
                qty=size,
                reduceOnly=True,
            )
        elif side == "sell":
            session.place_order(
                category="linear",
                symbol=symbol,
                side="Buy",
                order_type="Market",
                qty=size,
                reduceOnly=True,
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {e}")

# ‚îÄ‚îÄ –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/")
async def home():
    return {"ok": True, "msg": "Server alive"}

@app.get("/info")
async def info():
    return {
        "ok": True,
        "env": {
            "testnet": BYBIT_TESTNET,
            "enable_trading": ENABLE_TRADING,
            "symbol": SYMBOL,
            "default_leverage": DEFAULT_LEVERAGE,
            "default_sl_pct": DEFAULT_SL_PCT,
        },
        "endpoints": {
            "home": "/",
            "info": "/info",
            "swagger": "/docs",
            "tv_webhook_query": "/tv_webhook?token=<YOUR_TOKEN>",
        },
    }

@app.post("/tv_webhook")
async def tv_webhook(request: Request, token: str = Query(...)):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if token != WEBHOOK_TOKEN:
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π token –≤ –∑–∞–ø—Ä–æ—Å–µ")
        return JSONResponse(status_code=403, content={"detail": "Invalid token"})

    # –ü–∞—Ä—Å–∏–Ω–≥ JSON
    try:
        payload = await request.json()
    except Exception:
        logger.error("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç TradingView")
        return JSONResponse(status_code=400, content={"detail": "Invalid JSON"})

    logger.info(f"üì© Alert payload: {payload}")

    action = str(payload.get("action", "")).upper()  # BUY / SELL / CLOSE
    # qty –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∏–∑ TradingView, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 (–¥–ª—è CYBERUSDT —ç—Ç–æ 1 CYBER)
    qty = float(payload.get("qty", 1))

    # –ï—Å–ª–∏ —Ç–æ—Ä–≥–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
    if not ENABLE_TRADING or session is None:
        logger.info(f"üü® –¢–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞ (ENABLE_TRADING={ENABLE_TRADING}). –≠–º—É–ª–∏—Ä—É—é –¥–µ–π—Å—Ç–≤–∏–µ: {action}, qty={qty}")
        return {"status": "ok", "received": payload, "trading": "disabled"}

    try:
        if action == "BUY":
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —à–æ—Ä—Ç
            _close_all_positions(SYMBOL)
            # –í—Ö–æ–¥–∏–º long + —Å—Ç–∞–≤–∏–º SL –ø–æ DEFAULT_SL_PCT
            resp = _place_market_with_sl("Buy", qty, DEFAULT_SL_PCT)
            logger.info(f"‚úÖ BUY {SYMBOL} qty={qty} SL={DEFAULT_SL_PCT}% | resp: {resp}")

        elif action == "SELL":
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ª–æ–Ω–≥
            _close_all_positions(SYMBOL)
            # –í—Ö–æ–¥–∏–º short + —Å—Ç–∞–≤–∏–º SL –ø–æ DEFAULT_SL_PCT
            resp = _place_market_with_sl("Sell", qty, DEFAULT_SL_PCT)
            logger.info(f"‚úÖ SELL {SYMBOL} qty={qty} SL={DEFAULT_SL_PCT}% | resp: {resp}")

        elif action == "CLOSE":
            _close_all_positions(SYMBOL)
            logger.info(f"üî¥ CLOSE {SYMBOL} ‚Äî –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç—ã/–æ—Ç–º–µ–Ω–µ–Ω—ã")

        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            return JSONResponse(status_code=400, content={"detail": f"Unknown action: {action}"})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        return JSONResponse(status_code=500, content={"detail": str(e)})

    return {"status": "ok", "received": payload}
