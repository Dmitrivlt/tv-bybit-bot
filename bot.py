from fastapi import FastAPI, Request, Query
from fastapi.responses import JSONResponse
from pybit.unified_trading import HTTP
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI ===
app = FastAPI()

# === –õ–æ–≥–∏ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger("tradingview_bot")

# === –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω ===
SECRET_TOKEN = "mysecret123"

# === API –∫–ª—é—á–∏ Bybit (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏!) ===
API_KEY = "–¢–í–û–ô_API_KEY"
API_SECRET = "–¢–í–û–ô_API_SECRET"

# === –°–µ—Å—Å–∏—è Bybit ===
session = HTTP(
    testnet=True,  # ‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤—å False –¥–ª—è —Ä–µ–∞–ª–∞
    api_key=API_KEY,
    api_secret=API_SECRET
)

# === –î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
@app.get("/")
async def root():
    return {"msg": "Server alive"}

# === –ò–Ω—Ñ–æ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç) ===
@app.get("/info")
async def info():
    return {
        "ok": True,
        "endpoints": {
            "home": "/",
            "info": "/info",
            "swagger": "/docs",
            "webhook_query": "/tv_webhook?token=<YOUR_TOKEN>",
            "webhook_path": "/webhook/<YOUR_TOKEN>"
        },
        "your_token": SECRET_TOKEN
    }

# === –í–µ–±—Ö—É–∫ –æ—Ç TradingView ===
@app.post("/tv_webhook")
async def tv_webhook(request: Request, token: str = Query(...)):
    if token != SECRET_TOKEN:
        logger.warning("‚ùå Invalid token in request")
        return JSONResponse(status_code=403, content={"error": "Invalid token"})

    try:
        payload = await request.json()
    except Exception:
        logger.error("‚ö†Ô∏è Failed to parse JSON payload")
        return JSONResponse(status_code=400, content={"error": "Invalid JSON"})

    logger.info(f"üì© Alert received: {payload}")

    # === –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ CYBERUSDT ===
    symbol = "CYBERUSDT"
    action = payload.get("action")
    qty = float(payload.get("qty", 0.01))  # –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ qty ‚Äî –±–µ—Ä—ë–º 0.01

    try:
        if action == "BUY":
            session.place_order(
                category="linear",
                symbol=symbol,
                side="Buy",
                order_type="Market",
                qty=qty
            )
            logger.info("‚úÖ –û—Ç–∫—Ä—ã–ª LONG –ø–æ CYBERUSDT")

        elif action == "SELL":
            session.place_order(
                category="linear",
                symbol=symbol,
                side="Sell",
                order_type="Market",
                qty=qty
            )
            logger.info("‚úÖ –û—Ç–∫—Ä—ã–ª SHORT –ø–æ CYBERUSDT")

        elif action in ["CLOSE_LONG", "CLOSE_SHORT"]:
            session.cancel_all_orders(category="linear", symbol=symbol)
            logger.info("üî¥ –ó–∞–∫—Ä—ã–ª –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ CYBERUSDT")

        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            return JSONResponse(status_code=400, content={"error": "Unknown action"})

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

    return {"status": "ok", "received": payload}
